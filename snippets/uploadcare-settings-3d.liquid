<script charset="utf-8" src="https://ucarecdn.com/libs/widget/3.x/uploadcare.full.min.js"></script>
<!-- The main three.js file -->
<script src='https://cdnjs.cloudflare.com/ajax/libs/three.js/108/three.min.js'></script>
<!-- This brings in the ability to load custom 3D objects in the .gltf file format. Blender allows the ability to export to this format out the box -->
<script src='https://cdn.jsdelivr.net/gh/mrdoob/three.js@r92/examples/js/loaders/GLTFLoader.js'></script>
<!-- This is a simple to use extension for three.js that activates all the rotating, dragging and zooming controls we need for both mouse and touch, there isn't a clear CDN for this that I can find -->
<script src='https://threejs.org/examples/js/controls/OrbitControls.js'></script>

<script>
    // Product customizer
    const LOADER = document.getElementById('js-loader');

    var arr = [];
    for (const element of document.querySelectorAll('.customized-product')) {
        let modelPath = element.getAttribute('data-model-path');
        let activeMap = element.getAttribute('data-active-path');
        let canvasClass = element.id;
        let parentClass = element.getAttribute('data-parent');

        arr.push(modelPath, );
    }

    console.log(arr)
    
    const MODEL_PATH = "https://cdn.shopify.com/s/files/1/0084/2412/files/tea.glb?v=1596208819";

    var theModel;

    var activeOption = 'cup';
    var loaded = false;

    const BACKGROUND_COLOR = 0xffffff;

    // Init the scene
    const scene = new THREE.Scene();

    // Set background
    scene.background = new THREE.Color(BACKGROUND_COLOR);

    scene.fog = new THREE.Fog(BACKGROUND_COLOR, 20, 100);

    const canvas = document.querySelector('#custom-canvas');

    // Init the renderer
    const renderer = new THREE.WebGLRenderer({ canvas, antialias: true, preserveDrawingBuffer: true });
    renderer.shadowMap.enabled = true;
    renderer.setPixelRatio(window.devicePixelRatio);

    // Append to gallery wrap
    document.getElementById('custom').appendChild(renderer.domElement);

    // Add a camera
    var cameraFar = 7;
    var camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.z = cameraFar;
    camera.position.x = 0;
    
    // Initial material
    const INITIAL_MTL = new THREE.MeshPhongMaterial({ color: 0xffffff, shininess: 10 });

    const INITIAL_MAP = [
    { childID: "cup", mtl: INITIAL_MTL },
    { childID: "sphere", mtl: INITIAL_MTL },
    { childID: "box", mtl: INITIAL_MTL },
    { childID: "plate", mtl: INITIAL_MTL }];

    // Init the object loader
    var loader = new THREE.GLTFLoader();

    loader.load(MODEL_PATH, function (gltf) {
        theModel = gltf.scene;
        theModel.traverse(o => {
            if (o.isMesh) {
                o.castShadow = true;
                o.receiveShadow = true;
            }
        });
        // Set the models initial scale   
        theModel.scale.set(2, 2, 2);
        theModel.rotation.y = Math.PI;

        // Offset the y position a bit
        theModel.position.y = -1;

        // Set initial textures // white cup
        for (let object of INITIAL_MAP) {
            initColor(theModel, object.childID, object.mtl);
        }

        // Add the model to the scene
        scene.add(theModel);

        // Remove the loader
        LOADER.remove();

    }, undefined, function (error) {
        console.error(error);
    });

    // Function - Add the textures to the models
    function initColor(parent, type, mtl) {
        parent.traverse(o => {
            if (o.isMesh) {
                if (o.name.includes(type)) {
                    o.material = mtl;
                    o.nameID = type; // Set a new property to identify this object
                }
            }
        });
    }

    // Add lights
    var hemiLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.61);
    hemiLight.position.set(0, 50, 0);
    
    // Add hemisphere light to scene   
    scene.add(hemiLight);

    var dirLight = new THREE.DirectionalLight(0xffffff, 0.54);
    dirLight.position.set(-8, 12, 8);
    dirLight.castShadow = true;
    dirLight.shadow.mapSize = new THREE.Vector2(1024, 1024);

    // Add directional Light to scene    
    scene.add(dirLight); 

    // Floor
    var floorGeometry = new THREE.PlaneGeometry(5000, 5000, 1, 1);
    var floorMaterial = new THREE.MeshPhongMaterial({
        color: 0xffffff,
        shininess: 0 
    });

    var floor = new THREE.Mesh(floorGeometry, floorMaterial);
    floor.rotation.x = -0.5 * Math.PI;
    floor.receiveShadow = true;
    floor.position.y = -1;

    scene.add(floor);

    // Add controls
    var controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.maxPolarAngle = Math.PI / 2;
    controls.minPolarAngle = Math.PI / 3;
    controls.enableDamping = true;
    controls.enableZoom = false;
    controls.enablePan = false;
    controls.dampingFactor = 0.1;
    controls.autoRotate = false; // Toggle this if you'd like the chair to automatically rotate
    controls.autoRotateSpeed = 0.2; // 30

    function animate() {
        controls.update();
        renderer.render(scene, camera);
        requestAnimationFrame(animate);
        if (resizeRendererToDisplaySize(renderer)) {
            const canvas = renderer.domElement;
            camera.aspect = canvas.clientWidth / canvas.clientHeight;
            camera.updateProjectionMatrix();
        }
    }

    animate();

    // Function - New resizing method
    function resizeRendererToDisplaySize(renderer) {
        const canvas = renderer.domElement;
        var width = window.innerWidth;
        var height = window.innerHeight;
        var canvasPixelWidth = canvas.width / window.devicePixelRatio;
        var canvasPixelHeight = canvas.height / window.devicePixelRatio;

        const needResize = canvasPixelWidth !== width || canvasPixelHeight !== height;
        if (needResize) {
            renderer.setSize(width, height, false);
        }

        return needResize;
    }


    function setImageTexture(e) {
        let new_mtl;
        let texture = new THREE.TextureLoader().load(e);
        texture.wrapS = THREE.RepeatWrapping;
        texture.wrapT = THREE.RepeatWrapping;
        texture.flipY = false;
        texture.repeat.set( 2, 2 );

        new_mtl = new THREE.MeshPhongMaterial({
            map: texture,
            shininess: 1 
        });
        
        setMaterial(theModel, activeOption, new_mtl);
    }

    function setMaterial(parent, type, mtl) {
        parent.traverse(o => {
            if (o.isMesh && o.nameID != null) {
                if (o.nameID == type) {
                    o.material = mtl;
                }
            }
        });
    }

    //  Uploadcare 
    UPLOADCARE_PUBLIC_KEY = '6cca4986e4544dae71f4';
    var widget = uploadcare.Widget('[role=uploadcare-uploader]');
    var uploadedImage = null;

    widget.onUploadComplete(function (fileInfo) {
        uploadedImage = fileInfo.cdnUrl;
        saveImage(fileInfo.cdnUrl);
        setImageTexture(uploadedImage);
    });

    function fetchImages() {
        return new Promise(resolve => {
            const images = JSON.parse(localStorage.getItem('images') || '[]')
            setTimeout(() => resolve(images), 500)
        })
    }

    function saveImage(url) {
        return new Promise(resolve => {
            images.push(url)
            localStorage.setItem('images', JSON.stringify(images))
            setTimeout(() => resolve(), 500)
        })
    }

    // Check if local storage has a previously uploaded image and set texture
    fetchImages().then(uploadedImages => {
        images = uploadedImages

        const storageImage = images.reduce((html, url) => {
            return fullUrl = `${url}`;
        }, '')

        if(storageImage) {
            setImageTexture(storageImage);
        }
    });
</script>